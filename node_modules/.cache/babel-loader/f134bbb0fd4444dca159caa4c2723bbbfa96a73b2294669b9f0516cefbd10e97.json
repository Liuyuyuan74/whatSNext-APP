{"ast":null,"code":"var _jsxFileName = \"S:\\\\Program\\\\GitHub\\\\whatSNext\\\\front\\\\src\\\\element\\\\CustomizedTables.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = styled(TableCell)(({\n  theme\n}) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14\n  }\n}));\n_c = StyledTableCell;\nconst StyledTableRow = styled(TableRow)(({\n  theme\n}) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover\n  },\n  '&:last-child td, &:last-child th': {\n    border: 0\n  }\n}));\n_c2 = StyledTableRow;\nconst daysOfWeek = [\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"];\nexport default function CustomizedTables({\n  parsedMenu\n}) {\n  _s();\n  const [currentMenu, setCurrentMenu] = useState({});\n  const [shownDishes, setShownDishes] = useState({}); // Track shown dishes per category\n  const [infoMessage, setInfoMessage] = useState(''); // Info message for when no new dishes are available\n\n  if (!parsedMenu) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No menu data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Initialize the menu data if it's not already set\n  if (Object.keys(currentMenu).length === 0 && parsedMenu) {\n    const menuData = {};\n    const shown = {}; // Initialize shown dishes tracker\n\n    parsedMenu.split('; ').forEach(entry => {\n      const [className, dishes] = entry.split(': ');\n      menuData[className] = dishes.split(', '); // Keep dishes as an array of strings\n      shown[className] = []; // Track shown dishes for each category\n    });\n    setCurrentMenu(menuData);\n    setShownDishes(shown);\n  }\n\n  // Function to handle changing a dish\n  const handleChangeDish = (className, day) => {\n    const currentDishes = currentMenu[className]; // This is now an array of dishes\n    const alreadyShown = shownDishes[className];\n\n    // Find a dish that hasn't been shown yet\n    const newDish = currentDishes.find(dish => !alreadyShown.includes(dish));\n    if (newDish) {\n      // Update the current menu with the new dish\n      const newMenu = {\n        ...currentMenu,\n        [className]: [...currentDishes] // Make a copy of the array\n      };\n      newMenu[className][day] = newDish; // Update the dish for the given day\n\n      // Mark this dish as shown\n      const newShownDishes = {\n        ...shownDishes,\n        [className]: [...alreadyShown, newDish] // Add the new dish to the shown list\n      };\n      setCurrentMenu(newMenu);\n      setShownDishes(newShownDishes);\n      setInfoMessage(''); // Clear info message if a new dish is found\n    } else {\n      // If no new dishes are available, show an info message\n      setInfoMessage(`No new dishes available for ${className}.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 700\n      },\n      \"aria-label\": \"customized table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            align: \"center\",\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: Object.entries(currentMenu).map(([className, dishes]) => /*#__PURE__*/_jsxDEV(StyledTableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n            component: \"th\",\n            scope: \"row\",\n            children: className\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), daysOfWeek.map((day, index) => /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            align: \"center\",\n            children: [dishes[index] || \"-\", \" \", dishes[index] && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              size: \"small\",\n              onClick: () => handleChangeDish(className, index) // Handle changing the dish\n              ,\n              style: {\n                marginLeft: '10px'\n              },\n              children: \"Change\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 21\n            }, this)]\n          }, day, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this))]\n        }, className, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), infoMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginTop: '10px',\n        textAlign: 'center'\n      },\n      children: infoMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomizedTables, \"5UrNpLr4JsNbcFiroRPSNJDr4NM=\");\n_c3 = CustomizedTables;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledTableCell\");\n$RefreshReg$(_c2, \"StyledTableRow\");\n$RefreshReg$(_c3, \"CustomizedTables\");","map":{"version":3,"names":["React","useState","styled","Table","TableBody","TableCell","tableCellClasses","TableContainer","TableHead","TableRow","Paper","Button","jsxDEV","_jsxDEV","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","_c","StyledTableRow","action","hover","border","_c2","daysOfWeek","CustomizedTables","parsedMenu","_s","currentMenu","setCurrentMenu","shownDishes","setShownDishes","infoMessage","setInfoMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","menuData","shown","split","forEach","entry","className","dishes","handleChangeDish","day","currentDishes","alreadyShown","newDish","find","dish","includes","newMenu","newShownDishes","component","sx","minWidth","map","align","entries","scope","index","variant","size","onClick","style","marginLeft","marginTop","textAlign","_c3","$RefreshReg$"],"sources":["S:/Program/GitHub/whatSNext/front/src/element/CustomizedTables.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  '&:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  '&:last-child td, &:last-child th': {\r\n    border: 0,\r\n  },\r\n}));\r\n\r\nconst daysOfWeek = [\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"];\r\n\r\nexport default function CustomizedTables({ parsedMenu }) {\r\n  const [currentMenu, setCurrentMenu] = useState({});\r\n  const [shownDishes, setShownDishes] = useState({}); // Track shown dishes per category\r\n  const [infoMessage, setInfoMessage] = useState('');  // Info message for when no new dishes are available\r\n\r\n  if (!parsedMenu) {\r\n    return <div>No menu data available</div>;\r\n  }\r\n\r\n  // Initialize the menu data if it's not already set\r\n  if (Object.keys(currentMenu).length === 0 && parsedMenu) {\r\n    const menuData = {};\r\n    const shown = {}; // Initialize shown dishes tracker\r\n\r\n    parsedMenu.split('; ').forEach(entry => {\r\n      const [className, dishes] = entry.split(': ');\r\n      menuData[className] = dishes.split(', '); // Keep dishes as an array of strings\r\n      shown[className] = []; // Track shown dishes for each category\r\n    });\r\n\r\n    setCurrentMenu(menuData);\r\n    setShownDishes(shown);\r\n  }\r\n\r\n  // Function to handle changing a dish\r\n  const handleChangeDish = (className, day) => {\r\n    const currentDishes = currentMenu[className]; // This is now an array of dishes\r\n    const alreadyShown = shownDishes[className];\r\n\r\n    // Find a dish that hasn't been shown yet\r\n    const newDish = currentDishes.find(dish => !alreadyShown.includes(dish));\r\n\r\n    if (newDish) {\r\n      // Update the current menu with the new dish\r\n      const newMenu = {\r\n        ...currentMenu,\r\n        [className]: [...currentDishes], // Make a copy of the array\r\n      };\r\n      newMenu[className][day] = newDish; // Update the dish for the given day\r\n\r\n      // Mark this dish as shown\r\n      const newShownDishes = {\r\n        ...shownDishes,\r\n        [className]: [...alreadyShown, newDish], // Add the new dish to the shown list\r\n      };\r\n\r\n      setCurrentMenu(newMenu);\r\n      setShownDishes(newShownDishes);\r\n      setInfoMessage(''); // Clear info message if a new dish is found\r\n    } else {\r\n      // If no new dishes are available, show an info message\r\n      setInfoMessage(`No new dishes available for ${className}.`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Category</StyledTableCell>\r\n            {daysOfWeek.map(day => (\r\n              <StyledTableCell key={day} align=\"center\">{day}</StyledTableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {Object.entries(currentMenu).map(([className, dishes]) => (\r\n            <StyledTableRow key={className}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {className}\r\n              </StyledTableCell>\r\n              {daysOfWeek.map((day, index) => (\r\n                <StyledTableCell key={day} align=\"center\">\r\n                  {dishes[index] || \"-\"} {/* Display the dish or a dash if no dish */}\r\n                  {dishes[index] && (\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      onClick={() => handleChangeDish(className, index)} // Handle changing the dish\r\n                      style={{ marginLeft: '10px' }}\r\n                    >\r\n                      Change\r\n                    </Button>\r\n                  )}\r\n                </StyledTableCell>\r\n              ))}\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      {/* Display info message if needed */}\r\n      {infoMessage && (\r\n        <div style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n          {infoMessage}\r\n        </div>\r\n      )}\r\n    </TableContainer>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}